/* eslint-disable @typescript-eslint/no-misused-promises */ /* eslint-disable @typescript-eslint/restrict-plus-operands */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    postRouter: function() {
        return postRouter;
    },
    upload: function() {
        return upload;
    }
});
const _express = require("express");
const _multer = /*#__PURE__*/ _interop_require_default(require("multer"));
const _postcontroller = require("./post.controller");
const _passport = /*#__PURE__*/ _interop_require_default(require("passport"));
const _postschema = require("./post.schema");
const _zodvalidate = require("../middlewares/zod.validate");
const _authcontroller = require("../auth/auth.controller");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const authController = new _authcontroller.AuthController();
const postController = new _postcontroller.PostController();
const storage = _multer.default.diskStorage({
    destination: function(_req, _file, cb) {
        cb(null, './public/temp');
    },
    filename: function(_req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
        cb(null, file.fieldname + '-' + uniqueSuffix + '-' + file.originalname);
    }
});
const upload = (0, _multer.default)({
    storage
});
const postRouter = (0, _express.Router)();
/**
 * AUDIO ROUTES
 */ postRouter.post('/audio', upload.array('audio'), postController.uploadAudio);
postRouter.delete('/audioRemove', postController.eraseAudio);
postRouter.get('/getPostById/:id', (0, _zodvalidate.schemaValidator)(_postschema.getPostById), postController.getPostById);
/**
 * VIDEO ROUTES
 */ postRouter.post('/videoAdd', upload.single('video'), _passport.default.authenticate('jwt', {
    session: false
}), authController.jwtRenewalToken, postController.videoUpload);
postRouter.delete('/videoRm', (0, _zodvalidate.schemaValidator)(_postschema.videoEraseSchema), _passport.default.authenticate('jwt', {
    session: false
}), postController.eraseVideo);
/**
 * POST ROUTES
 */ postRouter.post('/create', upload.array('images', 5), _passport.default.authenticate('jwt', {
    session: false
}), authController.jwtRenewalToken, (0, _zodvalidate.schemaValidator)(_postschema.createPostSchema), postController.createPost);
postRouter.get('/getIds', postController.getPostsIds);
postRouter.get('/getPosts', /* schemaValidator(getPostsSchema), */ postController.getAllPosts);
postRouter.get('/get30days', postController.get30DaysPosts);
postRouter.put('/updatePost/:id', _passport.default.authenticate('jwt', {
    session: false
}), authController.jwtRenewalToken, upload.array('images', 5), postController.updatePost);
// postRouter.put('/hidePost/:id', passport.authenticate('jwt', { session: false }), authController.jwtRenewalToken, postController.hidePost)
postRouter.delete('/deletePost/:id', _passport.default.authenticate('jwt', {
    session: false
}), authController.jwtRenewalToken, (0, _zodvalidate.schemaValidator)(_postschema.getPostById), postController.deletePost);
postRouter.put('/hidePost/:id', _passport.default.authenticate('jwt', {
    session: false
}), authController.jwtRenewalToken, (0, _zodvalidate.schemaValidator)(_postschema.getPostById), postController.hidePost);
postRouter.put('/showPost/:id', _passport.default.authenticate('jwt', {
    session: false
}), authController.jwtRenewalToken, (0, _zodvalidate.schemaValidator)(_postschema.getPostById), postController.showPost);

//# sourceMappingURL=data:application/json;base64,